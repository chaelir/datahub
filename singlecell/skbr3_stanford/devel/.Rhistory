list(PATIENT_ID="skbr3_treated", DATA=Read10X(data.dir = "skbr3_treated/"))
)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID"))
data_clinical_patient
ncol(assay_data[[1]]$DATA)
ncol(assay_data[[2]]$DATA)
sapply(sapply(assay_data, "[[", "DATA"), ncol)
n_samples =  sum(sapply(sapply(assay_data, "[[", "DATA"), ncol))
data_clinical_sample = new_tibble(list(), nrow=n_samples)
colnames(assay_data[[1]]$DATA)
for(d in assay_data) { d$N_CELLS = ncol(d$DATA) }
assay_data
for(i in seq_len(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
assay_data[[1]]$N_CELLS
assay_data[[2]]$N_CELLS
n_samples =  sum(sapply(assay_data, "[[", "N_CELLS"))
data_clinical_sample
n_cells =  sapply(assay_data, "[[", "N_CELLS")
n_cells
?rep
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
id_assays
apply(cbind(n_cells, id_assays), 1, rep)
cbind(n_cells, id_assays)
rep(id_assays, n_cells)
tail(rep(id_assays, n_cells))
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = tail(rep(id_assays, n_cells)))
assay_data = list(
list(PATIENT_ID="skbr3_control", DATA=Read10X(data.dir = "skbr3_control/")),
list(PATIENT_ID="skbr3_treated", DATA=Read10X(data.dir = "skbr3_treated/"))
)
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
names(assay_data) = id_assays
colnames(assay_data$skbr3_control$DATA)
length(colnames(assay_data$skbr3_control$DATA))
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = ncol(assay_data[[i]]$DATA) }
assay_data[[1]]$ID_CELLS
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = colnames(assay_data[[i]]$DATA) }
sapply(assay_data, "[[", "ID_CELLS")
length(sapply(assay_data, "[[", "ID_CELLS"))
paste(id_assays, sapply(assay_data, "[[", "ID_CELLS"), "-")
paste(id_assays, sapply(assay_data, "[[", "ID_CELLS"), sep="-")
id_assyas
id_assays
paste(as.list(id_assays), sapply(assay_data, "[[", "ID_CELLS"), ="-")
paste(as.list(id_assays), sapply(assay_data, "[[", "ID_CELLS"))
as.list(id_assays)
t1 <- c(1, 2, 3)
t2 <- c(3.4, 5.5, 1.1)
tl <- list(t1, t2)
t1
t2
tl
do.call("paste", c(tl, sep = "\t"))
x=id_assays
x[[i]]$PATIENT_ID
i=1
x[[i]]$PATIENT_ID
x=assay_data
x[[i]]$PATIENT_ID
x[[i]]$ID_CELLS
SAMPLE_ID = sapply(seq_along(id_assays), function(i, x) {
paste(x[[i]]$PATIENT_ID, x[[i]]$ID_CELLS, sep="-") }, assay_data)
SAMPLE_ID
SAMPLE_ID[[1]]
SAMPLE_ID[[2]]
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = rep(id_assays, n_cells)) %>%
add_column(SAMPLE_ID = unlist(sapply(seq_along(id_assays), function(i, x) {
paste(x[[i]]$PATIENT_ID, x[[i]]$ID_CELLS, sep="-") }, assay_data)) )
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = rep(id_assays, n_cells))
sum(n_samples)
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples))
n_cells
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = rep(id_assays, n_cells))
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = rep(id_assays, n_cells)) %>%
add_column(SAMPLE_ID = unlist(sapply(seq_along(id_assays), function(i, x) {
paste(x[[i]]$PATIENT_ID, x[[i]]$ID_CELLS, sep="-") }, assay_data)) )
data_clinical_sample
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID"))
data_clinical_sample_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_sample.txt"
con <- file(data_clinical_sample_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Sample_Header_List)
writeLines(comment, con)
write.table(data_clinical_sample, row.names=F, sep='\t', quote=F, con)
close(con)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Sample_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient_file, row.names=F, sep='\t', quote=F, con)
close(con)
Sample_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1),
c("SAMPLE_ID", "Cell identifier", "sBioPortal", "STRING", 1)
)
data_clinical_sample = new_tibble(list(), nrow=sum(n_samples)) %>%
add_column(PATIENT_ID = rep(id_assays, n_cells)) %>%
add_column(SAMPLE_ID = unlist(sapply(seq_along(id_assays), function(i, x) {
paste(x[[i]]$PATIENT_ID, x[[i]]$ID_CELLS, sep="-") }, assay_data)) )
data_clinical_sample_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_sample.txt"
con <- file(data_clinical_sample_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Sample_Header_List)
writeLines(comment, con)
write.table(data_clinical_sample, row.names=F, sep='\t', quote=F, con)
close(con)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Sample_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
#optional attributes for assay
#data_clinical_patient.txt
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Patient_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
rownames(assay_data$skbr3_control$DATA)
setwd("/Users/charlie/setup/datahub/public/skbr3_stanford/devel")
colnames(assay_data$skbr3_control$DATA)
rownames(assay_data$skbr3_control$DATA)
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = paste(assay_data[[i]]$PATIENT_ID, colnames(assay_data[[i]]$DATA, sep="-")) }
for(i in seq_along(assay_data)) { colnames(assay_data[[i]][["DATA"]]) = assay_data[[i]][["ID_CELLS"]] }
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = paste(assay_data[[i]]$PATIENT_ID, colnames(assay_data[[i]]$DATA), sep="-") }
for(i in seq_along(assay_data)) { colnames(assay_data[[i]][["DATA"]]) = assay_data[[i]][["ID_CELLS"]] }
colnames(assay_data$skbr3_control$DATA)
SAMPLE_ID = unlist(sapply(assay_data, "[[", "ID_CELLS"))
SAMPLE_ID
data_expression_file = "~/setup/datahub/public/skbr3_stanford/devel/data_expression_file.txt"
data_expression_file
con <- file(data_expression_file, open="wt")
nrow(assay_data$skbr3_control$DATA)
nrow(assay_data$skbr3_treated$DATA)
do.call(cbind, sapply(assay_data,"[[","DATA"))
nrow(do.call(cbind, sapply(assay_data,"[[","DATA")))
ncol(do.call(cbind, sapply(assay_data,"[[","DATA")))
x = cbind(as.data.frame(list(Hugo_Symbol=row.names(assay_data[[1]]$DATA))), do.call(cbind, sapply(assay_data,"[[","DATA")))
x = Matrix::cBind(as.data.frame(list(Hugo_Symbol=row.names(assay_data[[1]]$DATA))), do.call(cbind, sapply(assay_data,"[[","DATA")))
x = Matrix::ccind(as.data.frame(list(Hugo_Symbol=row.names(assay_data[[1]]$DATA))), do.call(cbind, sapply(assay_data,"[[","DATA")))
x = Matrix::cbind(as.data.frame(list(Hugo_Symbol=row.names(assay_data[[1]]$DATA))), do.call(cbind, sapply(assay_data,"[[","DATA")))
x = base::cbind(as.data.frame(list(Hugo_Symbol=row.names(assay_data[[1]]$DATA))), do.call(cbind, sapply(assay_data,"[[","DATA")))
x = base::cbind(vector(Hugo_Symbol=row.names(assay_data[[1]]$DATA)), do.call(cbind, sapply(assay_data,"[[","DATA")))
matrix(row.names(assay_data[[1]]$DATA)))
matrix(row.names(assay_data[[1]]$DATA))
matrix(Hugo_Symbol=row.names(assay_data[[1]]$DATA))
?matrix
matrix(row.names(assay_data[[1]]$DATA), dim_names=c(NULL, "HugoSymbol"))
matrix(row.names(assay_data[[1]]$DATA), dimnames=c(NULL, "HugoSymbol"))
matrix(row.names(assay_data[[1]]$DATA), dimnames=list(NULL, "HugoSymbol"))
x=matrix(row.names(assay_data[[1]]$DATA), dimnames=list(NULL, "HugoSymbol"))
head(x)
cbind(matrix(row.names(assay_data[[1]]$DATA), dimnames=list(NULL, "Hugo_Symbol")),
do.call("cbind", sapply(assay_data, "[[", "DATA")))
do.call("cbind", sapply(assay_data, "[[", "DATA")))
do.call("cbind", sapply(assay_data, "[[", "DATA"))
cbind(matrix(row.names(assay_data[[1]]$DATA), dimnames=list(NULL, "Hugo_Symbol")),
do.call("cbind", sapply(assay_data, "[[", "DATA"))
)
?Matrix
Matrix(row.names(assay_data[[1]]$DATA), dimnames=list(NULL, "Hugo_Symbol"))
header = paste("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS")))
header
header = paste(do.call("c", "Hugo_Symbol", sapply(assay_data, "[[", "ID_CELLS")), sep="\t")
header = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), sep="\t")
header
data_expression_file = "~/setup/datahub/public/skbr3_stanford/devel/data_expression_file.txt"
con = file(data_expression_file, open="wt")
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), sep="\t")
writeLines(comment, con)
write.table(do.call("cbind", sapply(assay_data, "[[", "DATA")),
row.names=T, sep='\t', quote=F, con)
close(con)
?Matrix
write.table(as.data.frame(do.call("cbind", sapply(assay_data, "[[", "DATA"))),
row.names=T, sep='\t', quote=F, con)
as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix")
write.table(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"), #convert to ordinary matrix
row.names=T, sep='\t', quote=F, con)
con = file(data_expression_file, open="wt")
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), sep="\t")
writeLines(comment, con)
write.table(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"), #convert to ordinary matrix
row.names=T, sep='\t', quote=F, con)
close(con)
comment
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), collapse="\t")
comment
con = file(data_expression_file, open="wt")
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), collapse="\t")
writeLines(comment, con)
write.table(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"), #convert to ordinary matrix
row.names=T, sep='\t', quote=F, con)
close(con)
dim(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"))
?write.table
data_expression_file = "~/setup/datahub/public/skbr3_stanford/devel/data_expression_file.txt"
con = file(data_expression_file, open="wt")
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), collapse="\t")
writeLines(comment, con)
write.table(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"), #convert to ordinary matrix
row.names=T, col.names = F, sep='\t', quote=F, con)
close(con)
data_expression_file = "~/setup/datahub/public/skbr3_stanford/devel/data_expression_file.txt"
con = file(data_expression_file, open="wt")
comment = paste(c("Hugo_Symbol", do.call("c", sapply(assay_data, "[[", "ID_CELLS"))), collapse="\t")
writeLines(comment, con)
write.table(as(do.call("cbind", sapply(assay_data, "[[", "DATA")), "matrix"), #convert to ordinary matrix
row.names=T, col.names = F, sep='\t', quote=F, con)
close(con)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)，
c("OS_STATUS", "Overall Survival Status", "IMH", "STRING", 1), #[Not Available]
c("OS_MONTHS", "Overall Survival Status", "IMH", "NUMBER", 1), #[Not Available]
c("DFS_STATUS", "Disease Free Status", "IMH", "STRING", 1), #[Not Available]
c("DFS_MONTHS", "Disease Free (Months)", "IMH", "NUMBER", 1) #[Not Available]
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(OS_STATUS = "[Not Available]") %>%
add_column(OS_MONTHS = "[Not Available]") %>%
add_column(DFS_STATUS = "[Not Available]") %>%
add_column(DFS_MONTHS = "[Not Available]")
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)，
c("OS_STATUS", "Overall Survival Status", "IMH", "STRING", 1), #[Not Available]
c("OS_MONTHS", "Overall Survival Status", "IMH", "NUMBER", 1), #[Not Available]
c("DFS_STATUS", "Disease Free Status", "IMH", "STRING", 1), #[Not Available]
c("DFS_MONTHS", "Disease Free (Months)", "IMH", "NUMBER", 1) #[Not Available]
)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1)
c("OS_STATUS", "Overall Survival Status", "IMH", "STRING", 1), #[Not Available]
c("OS_MONTHS", "Overall Survival Status", "IMH", "NUMBER", 1), #[Not Available]
c("DFS_STATUS", "Disease Free Status", "IMH", "STRING", 1), #[Not Available]
c("DFS_MONTHS", "Disease Free (Months)", "IMH", "NUMBER", 1) #[Not Available]
)
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier", "sBioPortal", "STRING", 1),
c("OS_STATUS", "Overall Survival Status", "IMH", "STRING", 1), #[Not Available]
c("OS_MONTHS", "Overall Survival Status", "IMH", "NUMBER", 1), #[Not Available]
c("DFS_STATUS", "Disease Free Status", "IMH", "STRING", 1), #[Not Available]
c("DFS_MONTHS", "Disease Free (Months)", "IMH", "NUMBER", 1) #[Not Available]
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(OS_STATUS = "[Not Available]") %>%
add_column(OS_MONTHS = "[Not Available]") %>%
add_column(DFS_STATUS = "[Not Available]") %>%
add_column(DFS_MONTHS = "[Not Available]")
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Patient_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
assay_data = list(
list(PATIENT_ID="skbr3_control", DATA=Read10X(data.dir = "skbr3_control/"), ASSAY_CONDITION="CONTROL"),
list(PATIENT_ID="skbr3_treated", DATA=Read10X(data.dir = "skbr3_treated/"), ASSAY_CONDITION="TEMPEST")
)
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
for(i in seq_along(assay_data)) { assay_data[[i]][["ASSAY_ID"]] = ncol(assay_data[[i]]$PATIENT_ID) }
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = paste(assay_data[[i]]$PATIENT_ID, colnames(assay_data[[i]]$DATA), sep="-") }
for(i in seq_along(assay_data)) { colnames(assay_data[[i]][["DATA"]]) = assay_data[[i]][["ID_CELLS"]] }
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(ASSAY_ID = sapply(assay_data, "[[", "ASSAY_ID")) %>%
add_column(ASSAY_CONDITION = sapply(assay_data, "[[", "ASSAY_CONDITION")) %>%
#add_column(OS_STATUS = "[Not Available]") %>%
#add_column(OS_MONTHS = "[Not Available]") %>%
#add_column(DFS_STATUS = "[Not Available]") %>%
#add_column(DFS_MONTHS = "[Not Available]") %>%
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Patient_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(ASSAY_ID = sapply(assay_data, "[[", "ASSAY_ID"))
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(ASSAY_ID = sapply(assay_data, "[[", "ASSAY_ID")) %>%
add_column(ASSAY_CONDITION = sapply(assay_data, "[[", "ASSAY_CONDITION"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Patient_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(ASSAY_ID = sapply(assay_data, "[[", "ASSAY_ID")) %>%
add_column(ASSAY_CONDITION = sapply(assay_data, "[[", "ASSAY_CONDITION"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
data_clinical_patient
for(i in seq_along(assay_data)) { assay_data[[i]][["ASSAY_ID"]] = assay_data[[i]]$PATIENT_ID }
for(i in seq_along(assay_data)) { assay_data[[i]][["N_CELLS"]] = ncol(assay_data[[i]]$DATA) }
for(i in seq_along(assay_data)) { assay_data[[i]][["ID_CELLS"]] = paste(assay_data[[i]]$PATIENT_ID, colnames(assay_data[[i]]$DATA), sep="-") }
for(i in seq_along(assay_data)) { colnames(assay_data[[i]][["DATA"]]) = assay_data[[i]][["ID_CELLS"]] }
id_assays = sapply(assay_data, "[[", "PATIENT_ID")
n_cells =  sapply(assay_data, "[[", "N_CELLS") #cells per assay
Patient_Header_List = list(
c("PATIENT_ID", "Assay identifier alias as Patient ID", "sBioPortal", "STRING", 1),
c("ASSAY_ID", "Assay identifier", "sBioPortal", "STRING", 1),
c("ASSAY_CONDITION", "Assay Condition", "sBioPortal", "STRING", 1)
)
data_clinical_patient = new_tibble(list(), nrow=length(assay_data)) %>%
add_column(PATIENT_ID = sapply(assay_data, "[[", "PATIENT_ID")) %>%
add_column(ASSAY_ID = sapply(assay_data, "[[", "ASSAY_ID")) %>%
add_column(ASSAY_CONDITION = sapply(assay_data, "[[", "ASSAY_CONDITION"))
data_clinical_patient_file = "~/setup/datahub/public/skbr3_stanford/devel/data_clinical_patient.txt"
con <- file(data_clinical_patient_file, open="wt")
comment = sapply(2:5, function(x, l, c='#') {
cells = sapply(l,"[[", x)
return(paste(c, paste(cells, collapse='\t'), sep=''))
}, Patient_Header_List)
writeLines(comment, con)
write.table(data_clinical_patient, row.names=F, sep='\t', quote=F, con)
close(con)
?NormalizeData
library(readxl)
library(tibble)
library(dplyr)
library(plyr)
library(stringr)
library(gplots)
library(shiny)
library(heatmaply)
library("RColorBrewer")
library(Hmisc) #for translate
library(survival)
library(survminer)
library("RColorBrewer")
source('~/setup/xlib/R/xlib_utils.r')
source('~/setup/xlib/R/xlib_cv.r')
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
Data_Survival_Raw <- as.tibble(read.csv("~/ws/2018_IMH/Paul_patient_info_extended_2018May08.csv")) # id is "IPG_ID" and "LIMSPatient"
dim(Data_Survival_Raw) #n=193
head(Data_Survival_Raw)
full_vars = c("LIMSPatient", "IPG_ID", "Exclude", "Sample", "Reccurrance", "DaysSurvival", "X5YearSurvival", "Gender", "RaceEthnicity", "DxAge", "SmokingStatus",
"CancerGrade", "Site", "First_metastatic_site", "MMR_IHC", "MSI_PCR", "BRAFtesting", "Diagnosis", "Type", "Size",
"Neuts_Dx_KuL", "Lymphs_Dx_KuL", "NLR", "PriorCancers2", "Comorbidities2", "ADJTherapy2", "RecurrentTherapy2", "RecurrentTherapy2", "BMI", #new variables added 2018May23
"pT", "pN", "LN_positive", "LN_examined", "TumorSize_cm", "SummaryStage", "SummaryStage_edition7", "Treatment" #new variables added 2018May23
)
right_side_colon = c("ascending colon", "ascending", "appendix", "cecum", "hepatic flexure", "transverse")
left_side_colon = c("descending colon", "rectosigmoid junction", "sigmoid", "sigmoid colon", "splenic flexure")
Data_Survival_Clean1 = Data_Survival_Raw %>%
dplyr::select(one_of(full_vars)) %>%
mutate(LIMSPatient = as.character(LIMSPatient)) %>%
mutate(LIMSPatient = paste("P0", LIMSPatient, sep="")) %>%
mutate(IPG_ID = as.character(IPG_ID)) %>%
mutate(Reccurrance = replace(as.character(Reccurrance), ! Reccurrance %in% c("recur", "no recur"), NA)) %>%
mutate(Reccurrance = recode_factor(Reccurrance, `recur`="Recur", `no recur`="NoRecur")) %>%
mutate(Gender = recode_factor(Gender, `F`="Female", `f`="Female", `M`="Male", `m`="Male")) %>%  #Gender
mutate(RaceEthnicity = replace(as.character(RaceEthnicity), RaceEthnicity == "unknown", NA)) %>%
mutate(RaceEthnicity = recode_factor(as.character(RaceEthnicity), `white`="White", `black`="Black", `Hispanic`="Hispanic", `American Indian`="Other", `Pacific Islander`="Other", `Asian/Oriental`="Other")) %>%
mutate(DxAge = as.numeric(DxAge)) %>%
mutate(SmokingStatus = as.character(SmokingStatus)) %>%
mutate(SmokingStatus = ifelse(grepl("former", SmokingStatus) , "Smoker", SmokingStatus)) %>%
mutate(SmokingStatus = ifelse(grepl("current", SmokingStatus) , "Smoker", SmokingStatus)) %>%
mutate(SmokingStatus = ifelse(grepl("none", SmokingStatus), "Nonsmoker", SmokingStatus)) %>%
mutate(SmokingStatus = ifelse(SmokingStatus %in% c("Smoker", "Nonsmoker"), SmokingStatus, NA)) %>%
mutate(SmokingStatus = recode_factor(SmokingStatus, `Smoker`="Smoker", `Nonsomker`="Nonsomker")) %>%
mutate(CancerGrade = as.character(CancerGrade)) %>%
mutate(CancerGrade = ifelse(grepl("poorly", CancerGrade) , "High", CancerGrade)) %>% #"moderately to poorly" assigns high
mutate(CancerGrade = ifelse(grepl("undiff", CancerGrade) , "High", CancerGrade)) %>%
mutate(CancerGrade = ifelse(grepl("well", CancerGrade) , "Low", CancerGrade)) %>%
mutate(CancerGrade = ifelse(grepl("moderately", CancerGrade) , "Low", CancerGrade)) %>%
mutate(CancerGrade = recode_factor(CancerGrade, `Low`='Low', `High`='High')) %>%
mutate(Site = replace(as.character(Site), Site == "sigmoid colon","sigmoid")) %>%
mutate(Site = replace(Site, Site == "sigmoid","sigmoid colon")) %>%
mutate(Site = replace(Site, Site == "ascending colon","ascending")) %>%
mutate(Site = replace(Site, Site == "ascending","ascending colon")) %>%
mutate(Site = replace(Site, Site == "descending colon","descending")) %>%
mutate(Site = replace(Site, Site == "descending","descending colon")) %>%
mutate(Site = gsub("tranverse ", "transverse", Site)) %>%
mutate(Site = as.factor(replace(Site, Site == "transverse","transverse colon"))) %>%
mutate(First_metastatic_site = as.character(First_metastatic_site)) %>%
mutate(First_metastatic_site = replace(First_metastatic_site, First_metastatic_site == "no data available", NA)) %>%
mutate(First_metastatic_site = recode_factor(First_metastatic_site, `abd mass`="PAO", `abd masses`="PAO", `carcinomatosis`="PAO", `bladder`="Other",
`CNS`="Central Nervous System", `bone`="Bone", `cutaneous back tissue`="Other", `liver`="Liver", `local/regional`="Local",
`lung`="Lung", `mesenteric LN's`="Lymph Nodes", `mesentery`="PAO", `omentum`="PAO", `pelvic masses`="Pelvis", `peritoneum`="PAO",
`retroperitoneal LN's`="Lymph Nodes", `retroperitoneal lymph nodes`="Lymph Nodes", `retroperitoneum`="PAO")) %>%
mutate(MMR_IHC = replace(as.character(MMR_IHC), MMR_IHC != "neg" & MMR_IHC != "NotTested", "Positive")) %>%
mutate(MMR_IHC = replace(MMR_IHC, MMR_IHC == "NotTested", NA)) %>%
mutate(MMR_IHC = recode_factor(MMR_IHC, `neg`="Negative", `Positive`="Positive")) %>%
mutate(MSI_PCR = replace(as.character(MSI_PCR), MSI_PCR != "MSI-high", NA)) %>%
mutate(MSI_PCR = recode_factor(MSI_PCR, `MSI-high`="MSI-high")) %>%
mutate(BRAFtesting = replace(as.character(BRAFtesting), BRAFtesting == "", NA)) %>%
mutate(BRAFtesting = replace(BRAFtesting, BRAFtesting == "NotTested", NA)) %>%
mutate(BRAFtesting = replace(BRAFtesting, BRAFtesting == "positive", "Positive")) %>%
mutate(BRAFtesting = replace(BRAFtesting, grepl("neg", BRAFtesting), "Negative")) %>%
mutate(BRAFtesting = recode_factor(BRAFtesting, `Negative`="Negative", `Positive`="Positive")) %>%
mutate(Diagnosis = recode_factor(Diagnosis, `colon - adenocarcinoma`="adenocarcinoma", `colon-adenocarcinoma`="adenocarcinoma",
`colon - carcinoma, nos`="carcinoma", `colon-carcinoma`="carcinoma",
`colon - mucinous adenocarcinoma`="mucinous adenocarcinoma", `colon-mucinous adenocarcinoma`="mucinous adenocarcinoma",
`colon -mucinous adenocarcinoma`="mucinous adenocarcinoma",
`colon - signet ring`="signet ring carcinoma", `colon-signet ring carcinoma`="signet ring carcinoma")) %>%
mutate(Type = as.character(replace(Type, Type == "", NA))) %>% mutate(Type = recode_factor(Type, `punch`="punch")) %>%
mutate(Size = as.character(replace(Size, Size == "", NA))) %>% mutate(Size = recode_factor(Size, `2mm`="2mm")) %>%
mutate(Sample = replace(Sample, Sample == "", NA)) %>%
mutate(X5YearSurvival = recode(as.character(X5YearSurvival), ">5"=T, "<5"=F))
Data_Survival_Clean2 = Data_Survival_Clean1 %>%
mutate(Treatment = replace(as.character(Treatment), Treatment == "unknown", NA)) %>%
mutate(Treatment = ifelse(Treatment=="treated", T, F))
Data_Survival_Full = Data_Survival_Clean2 %>%
mutate(SideOfColon = ifelse(Site %in% right_side_colon, "Right", NA)) %>%
mutate(SideOfColon = ifelse(Site %in% left_side_colon, "Left", SideOfColon)) %>%
mutate(SideOfColon = recode_factor(SideOfColon, `Right`='Right', `Left`='Left')) %>%
mutate(Over2YSurvival = ifelse(DaysSurvival>730, T, F)) %>%
mutate(QuantOfSurvival = cut(DaysSurvival, breaks=unique(quantile(DaysSurvival, probs=seq(0,1,by=0.25))), include.lowest=TRUE)) %>%
mutate(ExtremeOfSurvival = as.numeric(QuantOfSurvival) %in% c(max(as.numeric(QuantOfSurvival)), min(as.numeric(QuantOfSurvival))))
summary(Data_Survival_Full)
head(Data_Survival_Full)
write.csv(Data_Survival_Full, "~/ws/2018_IMH/40_PatientStatistics/Data_Survival_Full.csv")
### Data 1. 134 Patients
#verify numbers with Paul
Data_Survival_Select = Data_Survival_Full %>%
filter(Exclude != "yes") %>%
filter(DaysSurvival>90) %>%
filter(!is.na(Sample))
summary(Data_Survival_Select)
nrow(Data_Survival_Select) #verified, total 134 samples
# if anything correlated with longer than 2 year survival
Data_Survival_Select$Over2YSurvival #63 patients with >2 year survival
gfit = glm(Over2YSurvival ~ Gender, family="binomial", data=Data_Survival_Select); summary(gfit)
gfit = glm(Over2YSurvival ~ RaceEthnicity, family="binomial", data=Data_Survival_Select); summary(gfit)
gfit = glm(Over2YSurvival ~ DxAge, family="binomial", data=Data_Survival_Select); summary(gfit)         #high age with worse survival, -0.54
gfit = glm(Over2YSurvival ~ SmokingStatus, family="binomial", data=Data_Survival_Select); summary(gfit) #nonsmoker with better survival, 0.66
gfit = glm(Over2YSurvival ~ CancerGrade, family="binomial", data=Data_Survival_Select); summary(gfit)   #high grade with worse survival, -0.9
gfit = glm(Over2YSurvival ~ Site, family="binomial", data=Data_Survival_Select); summary(gfit)          #ascending with worse survival, -1.0
gfit = glm(Over2YSurvival ~ SideOfColon, family="binomial", data=Data_Survival_Select); summary(gfit)   #Left with worse survival, -0.42
gfit = glm(Over2YSurvival ~ Reccurrance, family="binomial", data=Data_Survival_Select); summary(gfit)   #NoRecur with worse survival, -0.60
gfit = glm(Over2YSurvival ~ First_metastatic_site, family="binomial", data=Data_Survival_Select); summary(gfit)   #Lung with worse survival, -0.379
gfit = glm(Over2YSurvival ~ MMR_IHC, family="binomial", data=Data_Survival_Select); summary(gfit)   #IHC positive with worse survival, -1.12
gfit = glm(Over2YSurvival ~ BRAFtesting, family="binomial", data=Data_Survival_Select); summary(gfit)   #
gfit = glm(Over2YSurvival ~ Diagnosis, family="binomial", data=Data_Survival_Select); summary(gfit)   #Mucinous with worse survival, -1.79
gfit = glm(Over2YSurvival ~ Treatment, family="binomial", data=Data_Survival_Select); summary(gfit)   #Mucinous with worse survival, -1.79
install.packages("glm", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(installr)
install.packages("installR", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
updateR()
install.packages("installr")
